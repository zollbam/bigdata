-- Active: 1679962641651@@127.0.0.1@5432@gydb
-- 데이터 타입
-- * 1. char(n)
/*
- 입력한 n에 따라 길이가 고정된 열이 정의
- 입력된 n이상의 길이의 문자는 보관이 불가
- n이하로 글자가 입력 되면 나머지 공간은 공백으로 채움
- 더 긴 이름으로 표준 SQL인 character(n)으로 정의도 가능
*/

-- * 2. varchar(n)
/*
- 최대 길이가 n으로 정의되는 가변 길이 데이터 타입
- 최대치보다 적은 수의 글자가 입력 되었을 경우 공백을 넣지 않음 => DB의 공간을 절약
- 더 긴 이름으로 표준 SQL인 character varying(n)으로 정의도 가능
*/

-- * 3. text
/*
- 길이 제한이 없는 가변 길이 데이터 타입을 담은 열
- 가장 길게 담을 수 있는 문자열의 크기는 1 GB
- 표준SQL에는 포함되지 않음
- 최대 길이를 지정할 필요 없음
*/

-- 테이블 만들기
create table char_data_types (
    char_column char(10),
    varchar_column varchar(10),
    text_column text
);

-- 행삽입
insert into char_data_types 
    values ('avc', 'abc', 'abc'),
           ('defghi', 'defghi', 'defghi');

-- 테이블을 txt파일로 저장
-- COPY char_data_types to 'C:\\Users\\typetext.txt' WITH (FORMAT CSV, HEADER, DELIMITER ',');
/*
- char_data_types테이블을 해당 폴더에 typetext.txt로 저장시킨다.
- delimiter는 구분자로 열마다 '|'로 구분한 형식으로 변경한 것
*/

-- * 4. smallint
/*
- 표준 SQL
- 2바이트, -32768 ~ +32767
*/

-- * 5. integer
/*
- 표준 SQL
- 4바이트, -2147483648 ~ +2147483647
*/

-- * 6. bigint
/*
- 표준 SQL
- 8바이트, -9223372036854775808 ~ +9223372036854775807
*/

-- * 7. smallserial
/*
- 자동 증가 정수 타입
- 2바이트, 1~32767
*/

-- * 8. serial
/*
- 자동 증가 정수 타입
- 4바이트, 1~2147483647
*/

-- * 9. bigseial
/*
- 자동 증가 정수 타입
- 8바이트, 1~9223372036854775807
*/

-- 테이블 생성
create table people (
    id serial,
    person_name varchar(100)
);

-- identity를 사용한 자동 증가
/*
- 이 방법은 작성법은 길지만 serial방법보다 선호된다.
- 오라클 같은 다른 DB시스템과 상호 호환되며 사용자가 실수로 해당 열에 값을 삽입하지 않도록 방지하기 때문
 * 수동을 재정의하지 않는 이상 id열에 값을 삽입할 수 없습니다.
- generated always as identity
- generated by default as identity
*/
create table people (
    id integer generated always as identity,
    person_name varchar(100)
);

-- * 10. numeric(precision, scale)
/*
- 고정 소수점으로 precision은 입력될 숫자의 전체 자릿수를 scale은 소수점아래 자릿수
- demical(precision, scale)로도 대체 가능
- scale을 적지 않으면 기본값이 0으로 설정되고 이는 정수를 의미함
*/

-- * 11. real
/*
- 소수점이하 6자리까지 정밀도를 허용하며 부동 소주점 타입 또는 가변 정밀도 타입이라고도 함
- 
*/

-- * 12. double precision
/*
- 소수점 이하 15자리까지 정밀도를 허용하며 부동 소주점 타입 또는 가변 정밀도 타입이라고도 함
- 
*/

-- 테이블 생성
create table number_data_types(
    numeric_column numeric(20, 5),
    real_column real,
    double_column double precision
);

-- 데이터 삽입
insert into number_data_types VALUES
    (0.7, 0.7, 0.7),
    (2.13579, 2.13579,  2.13579),
    (2.1357987654, 2.1357987654, 2.1357987654),
    (13.548325458555487, 13.548325458555487, 13.548325458555487),
    (12854.1454875413218478, 12854.1454875413218478, 12854.1454875413218478);

-- 테이블 확인
SELECT * 
from number_data_types;
/*
- numeric타입은 전체 자리수에 벗어나지 않는한 소수점 아래 자리는 5개가 나온다.
- real과 double precision타입은 소수점이 6자리까지 허용이기는 하지만 정수부분이 어떻게 되는냐에 따라 소수점 아래 개수가 달라진다.
*/

-- 부동소수점 계산의 오류
select numeric_column * 10000000 fixed,
       real_column * 10000000 floating
from number_data_types
where numeric_column = 0.7;
/*
- 이러한 오류를 만들어 내는 부동 소수점으로 회성으로 우주선을 보낸거나 정부 예산을 계산한다면 큰일이 생길 수 있습니다.
*/

-- * 13. timestamp
/*
- 8바이트, 날짜와 시간
- timestamptz로 timestamp with time zone타입과 동일한 데이터 타입을 지정
*/

-- * 14. date
/*
- 4바이트, 날짜
*/

-- * 15. time
/*
- 8바이트, 시간
*/

-- * 16. interval
/*
- 16바이트, 시간차이
- 기간의 시작 또는 끝은 기록하지 않고 길이만 기록
*/

-- 테이블 생성
create table date_time_types(
    timestamp_column timestamp with time zone,
    interval_column interval
);

-- 데이터 삽입
insert into date_time_types values 
    ('2022-12-31 01:00 EST', '2 days'), -- EST는 미국 동부 표준시의 약어
    ('2022-12-31 01:00 -8', '1 month'), -- UTC의 시간 차이 또는 오프셋 수를 나타냄 = > -8: 미국과 캐나다의 태평양 표준 시간
    ('2022-12-31 01:00 Australia/Melbourne', '1 century'), -- century은 100년
    (now(), '1 week');

-- 테이블 확인
table date_time_types;

-- 날짜 시간 계산
SELECT timestamp_column,
       interval_column,
       timestamp_column - interval_column as new_date
from date_time_types;

-- * 17. json
/*
- JSON 텍스트 그대로 저장
*/ 

-- * 18. jsonb
/*
- JSON 텍스트를 바이너리 형식으로 변환해서 저장
- 인덱싱을 지원하므로 처리속도가 빠름
*/ 

-- * 19. boolean
/*
- true 또는 false 값을 저장하는 논리 타입
*/ 

-- * 20. geometric
/*
- 점, 선, 원 및 기타 2차원 개체를 포함하는 기하 타입
*/ 

-- * 21. text search
/*
- postgresql 전문 검색 엔진용 텍스트 검색 타입
*/ 

-- * 22. network address
/*
- IP 또는 MAC 주소와 같은 네트워크 주소 타입
*/ 

-- * 23. Universally Unique Idenetifier
/*
- 경우에 따라 테이블의 고유키로 사용될 수 있는 UUID타입
*/ 

-- * 24. range
/*
- 정수 또는 타임스탬프 같은 값의 범위를 지정하는 범위 타입
*/ 

-- * 25. 그 외
/*
- 바이너리 데이터를 저장하는 타입
- 구조화된 형식으로 정보를 저장하는 XML 및 JSON타입
*/ 

-- cast를 통한 타입 변경
select timestamp_column "timestamp", cast(timestamp_column as varchar(10)) "varchar"
from date_time_types;
/*
timestamp열은 타입이 timestamp이고, varchar열은 타입이 varchar이다.
*/

select numeric_column, cast(numeric_column as integer) "int", cast(numeric_column as text) "text"
from number_data_types;
/*
- int열은 numeric타입에서 정수형으로 변환된 경우입니다.
- text열은 numeric타입에서 텍스트형으로 변환된 경우입니다.
*/

select cast(char_column as integer) from char_data_types;
/*
- 문자형은 숫자형으로 변환이 불가하므로 오류가 나오는 것을 확인 할 수 있다.
*/

-- 이중콜론(::)으로 데이터 변환
select timestamp_column, timestamp_column::varchar(10)
from date_time_types;
/*
- 문제는 이중 콜론은 postgresql에서만 가능하다.
*/
